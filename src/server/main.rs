#![feature(futures_api, arbitrary_self_types, await_macro, async_await)]

#[macro_use] extern crate tarpc;

extern crate rand;
extern crate clap;
extern crate tarpc_bincode_transport;
extern crate sharedlib;

use clap::{App};
use std::{io, net::SocketAddr};
use tarpc::{
    context,
    Client,
    Server,
    server::{Handler},
};
use tarpc_bincode_transport::listen;
use tarpc_bincode_transport::Incoming;

mod laplace;

async fn run(server_addr: &SocketAddr) -> io::Result<()> {
    let transport: tarpc_bincode_transport::Incoming<(), ()> = listen(&server_addr)?;
    let addr = transport.local_addr();

    // The server is configured with the defaults.
    let server = server::new(server::Config::default())
        // Server can listen on any type that implements the Transport trait.
        .incoming(transport)
        // Close the stream after the client connects
        .take(1)
        // serve is generated by the service! macro. It takes as input any type implementing
        // the generated Service trait.
        .respond_with(serve(HeadServer));

    await!(server);

    Ok(())
}

fn main() {
    App::new("Vuvuzela Server")
         .version("1.0")
         .about("Vuvuzela Server")
         .author("Sam Ginzburg")
         .author("Benjamin Kuykendall")
         .get_matches();

}
